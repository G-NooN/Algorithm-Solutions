/*
  <문제(Lv. 1) - 크기가 작은 부분 문자열>

  숫자로 이루어진 문자열 t, p가 주어졌을 때,
  t에서 p와 길이가 같은 부분 문자열 중, 해당 문자열이 나타내는 수가 p가 나타내는 수보다 작거나 같은 부분 문자열의 개수를 return하는 solution 함수를 완성하라. 

  예를 들어, t = "3141592", p = "271"인 경우, t에서 길이가 3인 문자열은 "314", "141", "415", "159", "592"이며,
  이 중 271보다 작거나 같은 수는 141, 159 뿐이므로 2(개)를 return한다.
  
  [제한 사항]
  1. 1<= p의 길이 <= 18
  2. p의 길이 <= t의 길이 <= 10,000
  3. t와 p는 숫자로만 이루어진 문자열이며, 0으로 시작하지 않는다.
*/

/*3
  [접근 방식]
  1. 입력값 : 문자열 t, p / 출력값 : p와 길이가 같지만 p의 숫자보다 작거나 같은 값을 가지는 t의 부분 문자열의 개수
  2. 반복문을 사용하여 t에서 p의 길이와 같은 부분 문자열을 생성한다.
  3. 해당 부분 문자열의 값이 p보다 값이 작거나 같은지 판단한다.
  4. 조건에 일치할 때마다 answer의 값을 1씩 올린다.
  5. 결과를 반환한다.
*/

/*
  [해결 방법]
  1. p와 길이가 같은 부분 문자열을 찾을 것이기 때문에 반복문의 조건식은 t.length - p.length 까지 진행하도록 설정한다.
  2. substring()을 사용하여 p와 길이가 같은 부분 문자열을 생성한다.
  3. parseInt() or Number()를 사용하여 각 부분 문자열의 값을 비교한다.
*/

function solution(t, p) {
  let answer = 0;

  for (let i = 0; i <= t.length - p.length; i++) {
    let subArray = t.substring(i, i + p.length);

    if (Number(subArray) <= Number(p)) answer++;
  }

  return answer;
}

// console.log(solution("3141592", "271"));
// console.log(solution("500220839878", "7"));
// console.log(solution("10203", "15"));

/* -------------------- */

/*
  [초기 접근 방식]
  1. 입력값 : 문자열 t, p / 출력값 : p와 길이가 같지만 p의 숫자보다 작거나 같은 값을 가지는 t의 부분 문자열의 개수
  2. t에서 p의 길이와 같은 부분 문자열 배열을 생성한다.
  3. 해당 배열에서 요소의 값이 p보다 작거나 같은 요소의 개수를 찾는다.
  4. 결과를 반환한다.
*/
